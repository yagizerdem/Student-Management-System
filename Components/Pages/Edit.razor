@page "/Edit/{recordId}"
@using System.Data.SQLite
@inject ToastService toastService
@inject NavigationManager navigationManager

<h3>Edit</h3>
<EditForm Model="@studentRecord" OnValidSubmit=@ValidFormSubmitted>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <input type="hidden" @bind-value="studentRecord.Id"/>
    <div>
        <label>First name</label>
        <input @bind-value="studentRecord.FirstName" />
    </div>

    <div>
        <label>Last name</label>
        <input @bind-value="studentRecord.LastName" />
    </div>
    <div>
        <label>Gender</label>
        <InputSelect @bind-Value="studentRecord.Gender">
            <option disabled selected value> -- select an option -- </option>
            <option value="Male">Male</option>
            <option value="Female"> Female</option>
        </InputSelect>
    </div>

    <div>
        <label>Image</label>
        <InputFile type="file" OnChange="OnChange" />
    </div>

    <div>
        <lable>Email</lable>
        <input @bind-value="studentRecord.Email" />
    </div>
    <div>
        <lable>Date of birth</lable>
        <InputDate TValue="DateOnly" @bind-Value="studentRecord.DateOfBirth" Placeholder="Enter Date" />
    </div>
    <div>
        <lable>GPA</lable>
        <input type="number" @bind-value="studentRecord.GPA" min="0" max="4" />
    </div>


    <button type="submit">submit</button>
</EditForm>


<style>
    form {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }

        form > div {
            margin: 20px 0;
        }
</style>

@code {
    [Parameter]
    public string recordId { get; set; }

    [SupplyParameterFromForm]
    private Student studentRecord { get; set; }
    public Edit()
    {
        this.studentRecord = new();
    }
    protected override async Task OnInitializedAsync()
    {
        FetchData(Convert.ToInt32(this.recordId));

    }
    private Student FetchData(int recordId)
    {
        using (SQLiteConnection connection = new SQLiteConnection(SD.connString))
        {
            try
            {
                connection.Open();
                string query = "SELECT * FROM Student WHERE ID = @id";
                using (var command = new SQLiteCommand(query, connection))
                {
                    // Add the parameter and its value
                    command.Parameters.AddWithValue("@id", recordId);

                    using (var reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            var id = Convert.ToInt32(reader["Id"].ToString());
                            var firstName = reader["FirstName"].ToString();
                            var lastName = reader["LastName"].ToString();
                            var Gender = reader["Gender"].ToString();
                            var ImageBase64 = reader["ImageFilebase64"].ToString();
                            var Email = reader["Email"].ToString();
                            var DateOfBirth = reader["DateOfBirth"].ToString();
                            var GPA = Convert.ToDouble(reader["GPA"].ToString());


                            this.studentRecord = new Student()
                                {
                                    Id = id,
                                    FirstName = firstName,
                                    GPA = GPA,
                                    Gender = Gender,
                                    DateOfBirth = DateOnly.Parse(DateOfBirth),
                                    Email = Email,
                                    LastName = lastName,
                                    ImageFilebase64 = ImageBase64,
                                };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowToast(ex.Message, ToastLevel.Error);
            }
            return null;
        }
    }


    public void ValidFormSubmitted()
    {
        using (SQLiteConnection connection = new SQLiteConnection(SD.connString))
        {
            try
            {
                connection.Open();
                string query = "UPDATE Student SET FirstName = @FirstName, GPA = @GPA, LastName=@LastName, Gender=@Gender, ImageFilebase64=@ImageFilebase64 ,Email=@Email ,DateOfBirth=@DateOfBirth  WHERE ID = @ID";
                using (var command = new SQLiteCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@FirstName", studentRecord.FirstName);
                    command.Parameters.AddWithValue("@LastName", studentRecord.LastName);
                    command.Parameters.AddWithValue("@GPA", studentRecord.GPA);
                    command.Parameters.AddWithValue("@Gender", studentRecord.Gender);
                    command.Parameters.AddWithValue("@ImageFilebase64", studentRecord.ImageFilebase64);
                    command.Parameters.AddWithValue("@Email", studentRecord.Email);
                    command.Parameters.AddWithValue("@DateOfBirth", studentRecord.DateOfBirth.ToDateTime(new TimeOnly()).ToString("yyyy-MM-dd"));
                    command.Parameters.AddWithValue("@ID", studentRecord.Id);
                    // Execute the command
                    int rowsAffected = command.ExecuteNonQuery();

                    if (rowsAffected > 0)
                    {
                        // Record was updated
                        toastService.ShowToast("Student record updated successfully.", ToastLevel.Success);
                        navigationManager.NavigateTo("/");
                    }
                    else
                    {
                        // Record not found or no change
                        toastService.ShowToast("No record found with the specified ID or no changes made.", ToastLevel.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowToast(ex.Message, ToastLevel.Error);
            }
        }
    }
    public async void OnChange(InputFileChangeEventArgs args)
    {
        IBrowserFile file = args.File;
        this.studentRecord.ImageFilebase64 = await UploadMedia(file);
    }

    public async Task<string> UploadMedia(IBrowserFile file)
    {
        long maxFileSize = 1024 * 1024 * 5; // 5 MB or whatever, don't just use max int

        var readStream = file.OpenReadStream(maxFileSize);

        var buf = new byte[readStream.Length];

        var ms = new MemoryStream(buf);

        await readStream.CopyToAsync(ms);

        var buffer = ms.ToArray();

        return Convert.ToBase64String(buffer);
        
    }
}
