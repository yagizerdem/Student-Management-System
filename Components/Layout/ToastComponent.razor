@inject ToastService ToastService
@implements IDisposable

<div class="cs-toast @(_isVisible ? "cs-toast-visible" : null) @_backgroundCssClass">
    <div class="cs-toast-icon">
        <i class="fa fa-@_iconCssClass" aria-hidden="true"></i>
    </div>
    <div class="cs-toast-body">
        <h5>@_heading</h5>
        <p>@_message</p>
    </div>
</div>

<style>
    .cs-toast {
    display: none;
    padding: 1.5rem;
    color: #fff;
    z-index: 999;
    position: absolute;
    width: 25rem;
    top: 2rem;
    border-radius: 1rem;
    right: 2rem;
}

.cs-toast-icon {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 0 1rem;
    font-size: 2.5rem;
}

.cs-toast-body {
    display: flex;
    flex-direction: column;
    flex: 1;
    padding-left: 1rem;
}

.cs-toast-body p {
    margin-bottom: 0;
}

.cs-toast-visible {
    display: flex;
    flex-direction: row;
    animation: fadein 1.5s;
}

@@keyframes fadein {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}
</style>
@code {
    private string? _heading;
    private string? _message;
    private bool _isVisible;
    private string? _backgroundCssClass;
    private string? _iconCssClass;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
        ToastService.OnHide += HideToast;
    }

    private void ShowToast(string message, ToastLevel level)
    {
        BuildToastSettings(level, message);
        _isVisible = true;
        StateHasChanged();
    }

    private void HideToast()
    {
        _isVisible = false;
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void BuildToastSettings(ToastLevel level, string message)
    {
        switch (level)
        {
            case ToastLevel.Info:
                _backgroundCssClass = $"bg-info";
                _iconCssClass = "info";
                _heading = "Info";
                break;
            case ToastLevel.Success:
                _backgroundCssClass = $"bg-success";
                _iconCssClass = "check";
                _heading = "Success";
                break;
            case ToastLevel.Warning:
                _backgroundCssClass = $"bg-warning";
                _iconCssClass = "exclamation";
                _heading = "Warning";
                break;
            case ToastLevel.Error:
                _backgroundCssClass = "bg-danger";
                _iconCssClass = "times";
                _heading = "Error";
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(level), level, null);
        }

        _message = message;
    }

    void IDisposable.Dispose()
    {
        ToastService.OnShow -= ShowToast;
        ToastService.OnHide -= HideToast;
    }
}
